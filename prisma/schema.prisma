generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String?
  lastName       String?
  nickName       String?
  profile        String           @default("https://res.cloudinary.com/dajtfamck/image/upload/f_auto/v1735917511/bygk2ftxmju3gxseehtl.jpg")
  phone          String?
  hashPass       String?
  email          String           @unique
  role           Role             @default(USER)
  birthDay       DateTime?
  orderTrack     OrderTracking[]
  addresses      Addresses[]
  commentsFood   CommentsFood[]
  commentsBranch CommentsBranch[]
  favorite       Favorite?
}

model Favorite {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique @db.ObjectId
  foods  Foods[]
}

model Foods {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  image               String
  desc                String
  price               Int
  order               Int                   @default(0)
  rating              Float                 @default(0)
  type                TypeFood              @relation(fields: [typeId], references: [id])
  typeId              String                @db.ObjectId
  categorie           CategorieFood         @relation(fields: [categorieId], references: [id])
  categorieId         String                @db.ObjectId
  commentsFood        CommentsFood[]
  favoriteId          String?               @db.ObjectId
  favorite            Favorite?             @relation(fields: [favoriteId], references: [id])
  branchId            String                @db.ObjectId
  branch              Branchs               @relation(fields: [branchId], references: [id])
  specialOffer        Boolean               @default(false)
  numberOfSell        Int                   @default(0)
  foodOfOrderTracking FoodOfOrderTracking[]
}

model Addresses {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  titleAddress String
  meReciver    Boolean?
  phone        String
  nameReciver  String?
  address      String
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.ObjectId
}

model TypeFood {
  id   String  @id @default(auto()) @map("_id") @db.ObjectId
  name String  @unique
  food Foods[]
}

model CategorieFood {
  id   String  @id @default(auto()) @map("_id") @db.ObjectId
  name String
  food Foods[]
}

model CommentsFood {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  desc      String
  score     Float
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  public    Boolean? @default(false)
  food      Foods    @relation(fields: [foodId], references: [id])
  foodId    String   @db.ObjectId
}

model CommentsBranch {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  desc      String
  score     Float
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  branchId  String?  @db.ObjectId
  branch    Branchs? @relation(fields: [branchId], references: [id])
  public    Boolean? @default(false)
  createdAt DateTime @default(now())
}

model Branchs {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String           @unique
  nickName       String           @unique
  address        String
  phones         Json
  images         Json
  foods          Foods[]
  commentsBranch CommentsBranch[]
}

model OrderTracking {
  id              String                @id @default(auto()) @map("_id") @db.ObjectId
  branchId        String                @db.ObjectId
  foods           FoodOfOrderTracking[]
  price           Int
  discount        Int
  userId          String                @db.ObjectId
  user            User                  @relation(fields: [userId], references: [id])
  date            DateTime              @default(now())
  sendMethodId    String                @db.ObjectId
  sendMethod      SendMethod            @relation(fields: [sendMethodId], references: [id])
  statusId        String                @db.ObjectId
  status          StatusOfOrderTracking @relation(fields: [statusId], references: [id])
  paymentMethodId String                @db.ObjectId
  paymentMethod   PaymentMethod         @relation(fields: [paymentMethodId], references: [id])
}

model SendMethod {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  orderTrack OrderTracking[]
}

model StatusOfOrderTracking {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  orderTrack OrderTracking[]
}

model PaymentMethod {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  orderTrack OrderTracking[]
}

model FoodOfOrderTracking {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  foodId       String        @db.ObjectId
  food         Foods         @relation(fields: [foodId], references: [id])
  orderTrackId String        @db.ObjectId
  orderTrack   OrderTracking @relation(fields: [orderTrackId], references: [id])
  quantity     Int
}
